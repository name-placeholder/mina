---
kind: pipeline
name: deploy-to-cluster-custom
type: docker
clone:
  ref: openmina-ci
  depth: 1
trigger:
  event:
  - custom
# depends_on:
# - build-image-custom
volumes:
- name: step-cache
  temp: {}


environment:
  # path to openmina tooling
  OM: helm/openmina-config
  # target height to wait for after deployment
  TARGET_HEIGHT: 8
  # resource to wait for status when deploying Mina seeds
  SEEDS_WAIT_RESOURCE: deployment/seed1
  # timeout to wait when deploying Mina seeds
  SEEDS_WAIT_TIMEOUT: 10m
  # resource to wait for status when deploying Mina nodes
  NODES_WAIT_RESOURCE: deployment/node1
  # timeout to wait when deploying Mina nodes
  NODES_WAIT_TIMEOUT: 15m

steps:

- name: prepare-kubeconfig
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > $${KUBECONFIG}
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet-default}

- name: deployment-info
  image: alpine/k8s:1.26.1
  commands:
  - PORT="$$($${OM}/kube-utils.sh frontend-port $${NAMESPACE:-testnet-default})"
  - 'echo "Frontend: http://1.k8.openmina.com:$PORT"'
  - 'echo "Namespace: $${NAMESPACE:-testnet-default}"'

- name: prepare-deamon-json
  image: busybox
  commands:
  - sed -e "s/\$${TIMESTAMP}/$(date -u -Iseconds -d 00:00)/" $${OM}/resources/daemon.template.json > $${OM}/resources/daemon.json

- name: deploy-seeds
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  #- '[[ ! -n "${MINA_IMAGE}" ]] && export MINA_IMAGE=openmina/mina:$${DRONE_COMMIT_SHA:0:8} || export MINA_IMAGE=$${MINA_IMAGE}'
  #- export MINA_IMAGE=TODO
  - $${OM}/deploy.sh delete --all --force
  - $${OM}/deploy.sh deploy --seeds --force
  - kubectl wait $${SEEDS_WAIT_RESOURCE} --for=condition=Available --timeout=$${SEEDS_WAIT_TIMEOUT}

- name: log-node
  image: alpine/k8s:1.26.1
  detach: true
  environment:
    KUBECONFIG: kube-config
  commands:
  - while ! kubectl logs deployment/node1 --container mina --follow; do echo "waiting for node1 to start..."; sleep 10; done

- name: deploy-nodes
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  #- '[[ ! -n "${MINA_IMAGE}" ]] && export MINA_IMAGE=openmina/mina:$${DRONE_COMMIT_SHA:0:8} || export MINA_IMAGE=$${MINA_IMAGE}'
  #- export MINA_IMAGE=TODO
  - $${OM}/deploy.sh deploy --producers --snarkers --nodes --frontend --force
  - kubectl wait $${NODES_WAIT_RESOURCE} --for=condition=Available --timeout=$${NODES_WAIT_TIMEOUT}

- name: wait-for-height
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/wait-for-height.sh $${NODES_WAIT_RESOURCE} $${TAREGET_HEIGHT}

---

kind: pipeline
name: run-zkapps
type: docker
clone:
  ref: openmina-ci
  depth: 1
depends_on: [ deploy-to-cluster-custom ]

trigger:
  event: [ custom ]

environment:
  RELEASE_NAME: zkapps-drone-${DRONE_BUILD_NUMBER}
  SUFFIX: ${DRONE_BUILD_NUMBER}

steps:

- name: configure
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > "$KUBECONFIG"
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet-default}

- name: start
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - helm install $${RELEASE_NAME} helm/zkapps $${COUNT:+--set=transactionCount=$${COUNT}} $${PARALLELISM:+--set=parallelism=$${PARALLELISM}} --set=suffix=$${SUFFIX}

- name: run
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - |
    for t in $(seq 10); do
        kubectl logs jobs/send-zkapps-$${SUFFIX} --container=send --follow && exit
        echo "Waiting for send container..."
        sleep 5
    done
    echo "Failed to wait for send container"
    exit 1

- name: finish
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/kube-utils.sh wait-for-job-status job/send-zkapps-$${SUFFIX} 60m

- name: clean-up
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - helm delete $${RELEASE_NAME}
  when:
    status:
    - success
    # - failure
