---
kind: pipeline
name: deploy-to-cluster-custom
type: docker
clone:
  disable: true
trigger:
  event:
  - custom
# depends_on:
# - build-image-custom
volumes:
- name: step-cache
  temp: {}


environment:
  HEIGHT_WAIT: 8

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone https://github.com/openmina/openmina-testnet-k8s --branch ci-test --depth 1 testnet
  - cd testnet && git submodule update --init

- name: debug
  image: busybox
  comands:
  - ls -l .

- name: prepare-deamon-json
  image: busybox
  commands:
  - sed -e "s/\$${TIMESTAMP}/$(date -u -Iseconds -d 00:00)/" testnet/resources/daemon.template.json > testnet/resources/daemon.json

- name: prepare-kubeconfig
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > $${KUBECONFIG}
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet-default}

- name: deploy-seeds
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  #- '[[ ! -n "${MINA_IMAGE}" ]] && export MINA_IMAGE=openmina/mina:$${DRONE_COMMIT_SHA:0:8} || export MINA_IMAGE=$${MINA_IMAGE}'
  #- export MINA_IMAGE=TODO
  - testnet/deploy.sh delete --all --force
  - testnet/deploy.sh deploy --seeds --force
  - kubectl wait deployment/seed1 --for=condition=Available --timeout=10m

- name: deploy-nodes
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  #- '[[ ! -n "${MINA_IMAGE}" ]] && export MINA_IMAGE=openmina/mina:$${DRONE_COMMIT_SHA:0:8} || export MINA_IMAGE=$${MINA_IMAGE}'
  #- export MINA_IMAGE=TODO
  - testnet/deploy.sh deploy --producers --snarkers --nodes --frontend --force
  - kubectl wait deployment/node1 --for=condition=Available --timeout=10m

- name: wait-for-height
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - |
    # 120 times, 10s pause = 20min, should be enough to get to height 10
    for i in $$(seq 120); do
       HEIGHT=$$(kubectl exec deployment/node1 -c mina -- mina client status | grep "Block height" | cut -d ":" -f 2)
       if [ -n "$${HEIGHT}" ] && [ "$${HEIGHT}" -ge "$${HEIGHT_WAIT}" ]; then
           echo "node1 reached height ${HEIGHT_WAIT}"
           exit
       fi
       sleep 10
    done

---

kind: pipeline
name: run-zkapps
type: docker
depends_on: [ deploy-to-cluster-custom ]

trigger:
  event: [ custom ]

environment:
  RELEASE_NAME: zkapps-drone-${DRONE_BUILD_NUMBER}
  SUFFIX: ${DRONE_BUILD_NUMBER}

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone https://github.com/openmina/mina-sample-zkapp --depth 1 mina-sample-zkapp

- name: configure
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > kube-config
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet-default}

- name: start
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - helm install $${RELEASE_NAME} mina-sample-zkapp $${COUNT:+--set=transactionCount=$${COUNT}} $${PARALLELISM:+--set=parallelism=$${PARALLELISM}} --set=suffix=$${SUFFIX}

- name: run
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - |
    for t in $(seq 10); do
        kubectl logs jobs/send-zkapps-$${SUFFIX} --container=send --follow && exit
        echo "Waiting for send container..."
        sleep 5
    done
    echo "Failed to wait for send container"
    exit 1

- name: finish
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - |
    kubectl wait --for=jsonpath='{.status.conditions[*].status}'=True job/send-zkapps-$${SUFFIX} --timeout=180s
    MSG=$$(kubectl get job/send-zkapps-$${SUFFIX} -o jsonpath='{.status.conditions[?(@.status=="True")].message}')
    TYPE=$$(kubectl get job/send-zkapps-$${SUFFIX} -o jsonpath='{.status.conditions[?(@.status=="True")].type}')
    if [ "$${TYPE}" != "Complete" ]; then echo "Error running job: $${MSG}"; exit 1; fi

# - name: clean-up
#   image: alpine/k8s:1.26.1
#   environment:
#     KUBECONFIG: kube-config
#   commands:
#   - helm delete $${RELEASE_NAME}
#   when:
#     status:
#     - success
#     - failure
